<%- include('./includes/head.ejs') %>
<link rel="stylesheet" type="text/css" href="css/register.css">
<link rel="stylesheet" type="text/css" href="css/table.css">
<link rel="stylesheet" type="text/css" href="css/request_form.css">
<link rel="stylesheet" type="text/css" href="css/analysis.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
<script src="https://kit.fontawesome.com/0cfa224e02.js" crossorigin="anonymous"></script>
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">

<body style="background-color: rgba(255,164,0, 0.04999999701976776);">
  
  <%- include('./includes/nav.ejs') %> 
    <script src="https://d3js.org/d3.v4.min.js"></script>
    <script src='https://cdn.plot.ly/plotly-2.1.0.min.js'></script>
    <div class="con d-flex container-fluid justify-content-center row" >
        
        <form  class="col-xl-3 col-lg-4 col-md-4 col-sm-8 col-12 shadow mt-5 py-5 request_form">
            <div class="multipleSelection">
                <div style="text-align: center;">
                    <p> <input type="checkbox" id="myCheckbox">  View in percentage </p>
                </div>
                
                <div class="selectBox" 
                    onclick="showCheckboxes()">
                    <select class="form-control type">
                        <option>Select Job Id</option>
                    </select>
                    
                    <div class="overSelect"></div>
                    <!-- <button onclick="clicked()"> Welcome to our website </button>   -->
                </div>
                <div id="checkBoxes" onclick="clicked()" style = "max-height: 180px; overflow: auto">
                    <label for="Selectall">
                        <input type="checkbox" id="all" />
                        Select all
                    </label>
                </div>
            </div>
    </div>
    
        <script>
            var number = 4;
            var res = d3.json("http://localhost:3000/getJobNames", function(error, data_2){
                var jobids = data_2.jobNames
                for(var i = 0; i < jobids.length; i++){
                    var label = document.createElement("label");
                    var description = document.createTextNode(jobids[i]);
                    var checkbox = document.createElement("input");
                    checkbox.type = "checkbox";
                    checkbox.id = jobids[i];
                    checkbox.value = jobids[i];
                    label.appendChild(checkbox);
                    label.appendChild(description);
                    document.getElementById("checkBoxes").appendChild(label);
            }}) 
            
        </script>
    </form>
  
    <script>
        var show = true;
  
        function showCheckboxes() {
            var checkboxes = 
                document.getElementById("checkBoxes");
            
            if (show) {
                checkboxes.style.display = "block";
                show = false;
            } else {
                checkboxes.style.display = "none";
                show = true;
            }
        }
    </script>

<div id="vis" style="text-align: center;" class="mt-3"></div>
<div id="pie" style="text-align: center; margin-left: 600px" class="mt-3"></div>
<script>
var totalJobs = document.getElementById("checkBoxes").childElementCount
const jobIdschecked = [];
function clicked(){
    
    var totalJobs = document.getElementById("checkBoxes").childElementCount
    const jobIdschecked = [];
    if(document.getElementById("checkBoxes").children[0].children[0].checked){
        for(var i =1; i < totalJobs; i++){
            jobIdschecked.push(document.getElementById("checkBoxes").children[i].children[0].id)
        }
    }
    else{
        for(var i = 1; i < totalJobs; i++){
            a = document.getElementById("checkBoxes").children[i].children[0]
            if(a.checked){
                jobIdschecked.push(a.id)
            }
        }
    }
    d3.selectAll("svg").remove();
    d3.select("#vis").append("svg")
    d3.select("#pie").append("svg")
    getGraph(jobIdschecked)
    getGraph2(jobIdschecked)
}
// function filteredData(data, jobids){

// }
function getGraph(jobids){
    console.log("Started plotting")
    var res = d3.json("http://localhost:3000/getDataFunnel", function(error, data_2){
        // data = filteredData(data_2, jobids)
        var input  = {'data': data_2, 'width':1500, 'height': 600},
            canvas = setUpSvgCanvas(input);
            drawBars(input, canvas, jobids);
})
}


function drawBars(input, canvas, jobids) {

    var params = {'input': input, 'canvas': canvas};
    initialize(params, jobids);
    update(params);

}


function initialize(params, jobids) {

    // unpacking params
    var canvas = params.canvas,
        input = params.input;

    // unpacking canvas
    var svg = canvas.svg,
        margin = canvas.margin,
        width = params.width = canvas.width,
        height = params.height = canvas.height;

    // processing Data and extracting binNames and clusterNames
    var formattedData = formatData(input.data, jobids),
        blockData = params.blockData = formattedData.blockData,
        binNames = params.binNames = formattedData.binNames,
        clusterNames = params.clusterNames = formattedData.clusterNames;


    // initialize color
    var color = setUpColors().domain(clusterNames);

    // initialize scales and axis
    var scales = initializeScales(width, height),
        x = scales.x,
        y = params.y = scales.y;

    x.domain(binNames);
    y.domain([0, d3.max(blockData, function(d) { return d.y1; })]);

    initializeAxis(svg, x, y, height, width);

    // initialize bars
    var bar = params.bar = svg.selectAll('.bar')
      .data(blockData)
      .enter().append('g')
        .attr('class', 'bar');

    bar.append('rect')
            .attr('x', function(d) { return x(d.x);})
            .attr('y', function(d) {return y(0);})
            .attr('width', x.bandwidth())
            .attr('height', 0)
            .attr('fill', function(d){ return color(d.cluster);})
            .on("mouseover", function() { tooltip.style("display", null); })
            .on("mouseout", function() { tooltip.style("display", "none"); })
        .on("mousemove", function(d) {
            console.log(d);
            var xPosition = d3.mouse(this)[0] - 15;
            var yPosition = d3.mouse(this)[1] - 25;
            tooltip.attr("transform", "translate(" + xPosition + "," + yPosition + ")");
            tooltip.select("text").text(
                function(d, newView){
                    if(newView){
                        return    (d.y1 - d.y0) * 100;
                    }
                    else{
                        return d.y1 - d.y0;
                    }
            });
  })

    // heights is a dictionary to store bar height by cluster
    // this hierarchy is important for animation purposes
    // each bar above the chosen bar must collapse to the top of the
    // selected bar, this function defines this top
    params.heights = setUpHeights(clusterNames, blockData);

    // defining max of each bin to convert later to percentage
    params.maxPerBin = setUpMax(clusterNames, blockData);


    // variable to store chosen cluster when bar is clicked
    var chosen = params.chosen = {
        cluster: null
    };

    // initialize legend
    var legend = params.legend = svg.selectAll('.legend')
        .data(clusterNames)
        .enter().append('g')
            .attr('class', 'legend');

    legend.append('rect')
        .attr('x', width + margin.right - 18)
        .attr('y', function(d, i) {return 20 * (clusterNames.length - 1 - i);})
        .attr('height', 18)
        .attr('width', 18)
        .attr('fill', function(d){ return color(d);})
        // .on('click', function(d){
        //     chosen.cluster = chosen.cluster === d ? null : d;
        //     // d3.selectAll("svg").remove();
        //     // d3.select("#vis").append("svg")
        //     // update(params);
        // });


    legend.append('text')
        .attr('x', width + margin.right - 25)
        .attr('y', function(d, i) { return 20 * (clusterNames.length - 1 - i) ;})
        .text(function(d) {return d;})
        .attr('dy', '.95em')
        .style('text-anchor', 'end');

    // initialize checkbox options
    d3.select("#myCheckbox").on("change",function(){update(params);});

    params.view = false;
    // var tooltip = svg.append("g")
    //     .attr("class", "tooltip")
    //     .style("display", "none");
    
    // tooltip.append("rect")
    //     .attr("width", 30)
    //     .attr("height", 20)
    //     .attr("fill", "white")
    //     .style("opacity", 0.5);

    // tooltip.append("text")
    //     .attr("x", 15)
    //     .attr("dy", "1.2em")
    //     .style("text-anchor", "middle")
    //     .attr("font-size", "12px")
    //     .attr("font-weight", "bold");

}

function update(params){

    // retrieving params to avoid putting params.x everywhere

    var svg = params.canvas.svg,
        margin = params.canvas.margin,
        y = params.y,
        blockData = params.blockData,
        heights = params.heights,
        chosen = params.chosen,
        width = params.width,
        height = params.height,
        bar = params.bar,
        clusterNames = params.clusterNames,
        binNames = params.binNames,
        legend = params.legend,
        maxPerBin = params.maxPerBin,
        view = params.view;

    var transDuration = 700;

    // re-scaling data if view is changed to percentage
    // and re-scaling back if normal view is selected
    var newView = d3.select("#myCheckbox").property("checked");

    if(newView){
        if(view != newView){
            blockData.forEach(function (d){
                d.y0 /= maxPerBin[d.x];
                d.y1 /= maxPerBin[d.x];
                d.height /= maxPerBin[d.x];
            });
            heights = setUpHeights(clusterNames, blockData);
        }
    }
    else{
        if(view != newView){
            blockData.forEach(function (d){
                d.y0 *= maxPerBin[d.x];
                d.y1 *= maxPerBin[d.x];
                d.height *= maxPerBin[d.x];
            });
            heights = setUpHeights(clusterNames, blockData);
        }
    }
    params.view = newView;


    // update Y axis
    if(chosen.cluster == null){
        y.domain([0, d3.max(blockData, function(d) { return d.y1; })]);
    }
    else{
        y.domain([0, d3.max(heights[chosen.cluster])]);
    }

    if(newView){
        y.domain([0, 1]);
    }

    var axisY = d3.axisLeft(y)
        .tickSize(-width);

    if(newView){
        axisY.tickFormat(d3.format(".0%"));
    }

    svg.selectAll('.axisY')
        .transition()
        .duration(transDuration)
        .call(axisY);


    // update legend
    legend.selectAll('rect')
        .transition()
        .duration(transDuration)
        .attr('height', function(d) {return choice(chosen.cluster, d, 18, 18, 0);})
        .attr('y', function(d) {
            var i = clusterNames.indexOf(d);
            if (i > clusterNames.indexOf(chosen.cluster)){
                return choice(chosen.cluster, d, 20 * (clusterNames.length - 1 - i) , 0, 0);
            }
            else {
                return choice(chosen.cluster, d, 20 * (clusterNames.length - 1 - i) , 0,  18);
            }
        });
    legend.selectAll('text')
        .transition()
        .duration(transDuration)
        .attr('y', function(d) {
            var i = clusterNames.indexOf(d);
            if (i > clusterNames.indexOf(chosen.cluster)){
                return choice(chosen.cluster, d, 20 * (clusterNames.length - 1 - i) , 0, 0);
            }
            else {
                return choice(chosen.cluster, d, 20 * (clusterNames.length - 1 - i) , 0,  18);
            }
        })
        .style('font-size' ,function(d, i) {return choice(chosen.cluster, d, '16px', '16px', '0px');})
        .attr('x', function(d) {return choice(chosen.cluster, d, 
            width + margin.right - 25,
            width + margin.right - 25,
            width + margin.right - 25 - this.getComputedTextLength()/2);});


    // update bars
    bar.selectAll('rect')
        // .on('click', function(d){
        //     chosen.cluster = chosen.cluster === d.cluster ? null : d.cluster;
        //     // d3.selectAll("svg").remove();
        //     // d3.select("#vis").append("svg")
        //     // update(params);
        // })
        .transition()
        .duration(transDuration)
        .attr('y', function(d) { 
            return choice(chosen.cluster, d.cluster,
                y(d.y1),
                y(d.height),
                myHeight(chosen, d, clusterNames, binNames, y, heights));})
        .attr('height', function(d) { 
            return choice(chosen.cluster, d.cluster,
                height - y(d.height),
                height - y(d.height),
                0);});
    bar.select('rect')
        .on("mouseover", function() { tooltip.style("display", null); })
        .on("mouseout", function() { tooltip.style("display", "none"); })
        .on("mousemove", function(d) {
            console.log(d);
            var xPosition = d3.mouse(this)[0] - 15;
            var yPosition = d3.mouse(this)[1] - 25;
            tooltip.attr("transform", "translate(" + xPosition + "," + yPosition + ")");
            tooltip.select("text").text(d.y1 - d.y0);
  })
  var tooltip = svg.append("g")
        .attr("class", "tooltip")
        .style("display", "none");
    
    tooltip.append("rect")
        .attr("width", 30)
        .attr("height", 20)
        .attr("fill", "white")
        .style("opacity", 0.5);

    tooltip.append("text")
        .attr("x", 15)
        .attr("dy", "1.2em")
        .style("text-anchor", "middle")
        .attr("font-size", "12px")
        .attr("font-weight", "bold");

}

// heights is a dictionary to store bar height by cluster
// this hierarchy is important for animation purposes 
function setUpHeights(clusterNames, blockData) {
    var heights = {};
    clusterNames.forEach(function(cluster) { 
        var clusterVec = [];
        blockData.filter(function (d){ return d.cluster == cluster;}).forEach(function(d) {
            clusterVec.push(d.height);
        });
        heights[cluster] = clusterVec;
    });
    return heights;
}

// getting the max value of each bin, to convert back and forth to percentage
function setUpMax(clusterNames, blockData){
    var lastClusterElements = blockData.filter(function(d){return d.cluster == clusterNames[clusterNames.length - 1]})
    var maxDict = {};
    lastClusterElements.forEach(function(d) {
        maxDict[d.x] = d.y1;
    });
    return maxDict;
}

// custom function to provide correct animation effect
// bars should fade into the top of the remaining bar
function myHeight(chosen, d, clusterNames, binNames, y, heights){
    if(chosen.cluster == null){
        return 0;
    }
    if(clusterNames.indexOf(chosen.cluster) > clusterNames.indexOf(d.cluster)){
        return y(0);
    }
    else {
        return y(heights[chosen.cluster][binNames.indexOf(d.x)]);
    }
}


// handy function to play the update game with the bars and legend
function choice(variable, target, nullCase, targetCase, notTargetCase){
    switch(variable) {
    case null:
        return nullCase;
    case target:
        return targetCase;
    default:
        return notTargetCase;
    }
}


function initializeScales(width, height){
    var x = d3.scaleBand()
    .rangeRound([0, width])
    .padding(0.5);

    var y = d3.scaleLinear()
        .range([height, 0]);

    return {
        x: x,
        y: y
    };
}
function wrap(text, width) {
  text.each(function() {
    var text = d3.select(this),
        words = text.text().split(/\s+/).reverse(),
        word,
        line = [],
        lineNumber = 0,
        lineHeight = 1.1, // ems
        y = text.attr("y"),
        dy = parseFloat(text.attr("dy")),
        tspan = text.text(null).append("tspan").attr("x", 0).attr("y", y).attr("dy", dy + "em");
    while (word = words.pop()) {
      line.push(word);
      tspan.text(line.join(" "));
      if (tspan.node().getComputedTextLength() > width) {
        line.pop();
        tspan.text(line.join(" "));
        line = [word];
        tspan = text.append("tspan").attr("x", 0).attr("y", y).attr("dy", ++lineNumber * lineHeight + dy + "em").text(word);
      }
    }
  });
}

function initializeAxis(svg, x, y, height, width){
    var yAxis = d3.axisLeft(y)
        .tickSize(-width);

    svg.append('g')
        .attr('class', 'axisY')
        .call(yAxis);

    svg.append('g')
        .attr('class', 'axisX')
        .attr('transform', 'translate(0,' + height + ')')
        .call(d3.axisBottom(x))
    .selectAll(".tick text")
        .call(wrap, x.bandwidth()); // changed here
 
}


function setUpSvgCanvas(input) {
    // Set up the svg canvas
    var margin = {top: 20, right: 0, bottom: 50, left: 80},
        width = input.width - margin.left -margin.right,
        height = input.height - margin.top -margin.bottom;

    var svg = d3.select('svg')
        .attr('width', width + margin.left + margin.right )
        .attr('height', height + margin.top +margin.bottom )
        .append('g')
        .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');

    return {
        svg: svg,
        margin: margin,
        width: width,
        height: height
    };
}


function setUpColors() {
    return d3.scaleOrdinal(d3.schemeCategory20);
}


// formatting Data to a more d3-friendly format
// extracting binNames and clusterNames

function formatData(data_2, jobids){

    // var clusterNames = d3.keys(data[0]).filter(function(key) {return key !== 'year'; });
    var clusterNames = ['active', 'hired', 'converted', 'rejected']
    var binNames = [];

    var blockData = [];
    // by default all the data will be selected
    var stages = ['Assessment', 'Preliminary Phone Screen', 
            'Hiring Manager Review', 'Phone Interview 2', 'Application Review', 'Case Study & Task', 'Case Study', 'Executive Review', 
            'Technical Interview', 'HR Discussion', 'Recruiter Evaluation', 'Phone Interview', 'Offer Short List', 
            'Panel Screening', 'Take Home Test', 'HR Round', 'Offer', 'Hiring Manager Interview', 'Recruiters Evaluation', 
            'Executive Interview', "Recruiter's Evaluation", 'HR Interview', 'Face to Face']
    var data = {}
    for(var i =0; i < stages.length; i++){
        data[stages[i]] = {}
        for(var j =0; j < clusterNames.length; j++){
            data[stages[i]][clusterNames[j]] = 0
        }
    }
    for(var id in data_2){
        if(data_2.hasOwnProperty(id)){
            if(jobids.includes(id)){
                for(var stage in data_2[id]){
                    if(data_2[id].hasOwnProperty(stage)){
                        for(var status in data_2[id][stage]){
                            if(data_2[id][stage].hasOwnProperty(status)){
                                data[stage][status] += data_2[id][stage][status]
                            }
                        
                        }   
                    }
                }
            }
        }
    }
    for (var key in data) {
      if (data.hasOwnProperty(key)) {
        var y = 0;
        var val = data[key];
        binNames.push(key);
        for(var j = 0; j < clusterNames.length; j++){
            var height = val[clusterNames[j]]
            var block = {'y0': parseFloat(y),
                'y1': parseFloat(y) + parseFloat(height),
                'height':height,
                'x': key,
                'cluster': clusterNames[j]};
            y+= parseFloat(data[key][clusterNames[j]]);
            blockData.push(block);
        }
      }
    }
    return {
        blockData: blockData,
        binNames: binNames,
        clusterNames: clusterNames
    };

}
function formatData2(data,jobids){
    data_final = {Active: 0, Rejected: 0, Hired: 0, Total:0}
    for(var i=0; i< jobids.length; i++){
        
        if(data.Active.hasOwnProperty(jobids[i])){
            data_final.Active += data.Active[jobids[i]]
            data_final.Total += data.Active[jobids[i]]
        }
        if(data.Rejected.hasOwnProperty(jobids[i])){
            data_final.Rejected += data.Rejected[jobids[i]]
            data_final.Total += data.Rejected[jobids[i]]
        }
        if(data.Hired.hasOwnProperty(jobids[i])){
            data_final.Hired += data.Hired[jobids[i]]
            data_final.Total += data.Hired[jobids[i]]
        }
    }
    console.log(data_final)
    return data_final
}
function getGraph2(jobids){
    var res = d3.json("http://localhost:3000/getData", function(error, data_2){
        // data = filteredData(data_2, jobids)
        // var input  = {'data': data_2, 'width':1500, 'height': 600},
        data_final = formatData2(data_2, jobids);
        var total = data_final.Total;
        console.log(total);
        var data = [{
            values: [data_final.Active, data_final.Hired, data_final.Rejected],
            labels:["Active", "Hired", "Rejected"],
            customdata: [total, total, total],
            texttemplate: "%{label}: %{percent} ",
            textposition: "inside",
            domain: {column: 0},
            name: 'Total Applications for checked ids',
            hovertemplate: "%{label}: %{value} / %{customdata} (%{percent}) ",
            hole: 0.2,
            type: 'pie'
        }];

    var layout = {
      title: 'Total applications: ' + total,
      height: 500,
      width: 600,
      showlegend: true,
      legend: {
        x: 1,
        xanchor: 'right',
        y: 1,
    traceorder: 'normal',
    font: {
      family: 'sans-serif',
      size: 12,
      color: '#000'
    },
    bgcolor: '#E2E2E2',
    bordercolor: '#FFFFFF',
    borderwidth: 2

        }
 
  
    //   grid: {rows: 1, columns: 2}
    };
    Plotly.newPlot('pie', data, layout);
    });
}


</script>

    </body>
</html> 